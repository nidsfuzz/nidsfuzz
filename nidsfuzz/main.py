import argparse

from fuzzer import Fuzzer
from replay import Replay
from traffic_injector.tunable_responder import TunableResponder


def run_replay():
    replay = Replay(
        local_ip=args.initiator,
        remote_ip=args.responder,
        echo_port=args.echo_port,
        data_port=args.data_port,
        traffic=args.traffic,
    )
    replay.replay()

def run_client():
    if args.rule_file is None:
        parser.error("--client requires --rule_file option")

    fuzzer = Fuzzer(
        local_ip=args.initiator,
        remote_ip=args.responder,
        echo_port=args.echo_port,
        data_port=args.data_port,
        out_dir=args.out_dir,
    )

    fuzzer.apply_strategy(
        select_strategy=args.select_strategy,
        mutate_strategy=args.mutate_strategy,
        rule_files=[args.rule_file],
        batch_size=args.batch_size,
        repeatable=args.repeatable,
        only_activated=args.only_activated,
    )

    fuzzer.apply_sanitizer(
        alert_files=args.alert_files,
        timeout=args.timeout,
        n_tests=args.n_tests,
    )

    try:
        fuzzer.start()
    except KeyboardInterrupt:
        fuzzer.stop()

def run_server():
    server = TunableResponder(
        host="0.0.0.0",
        echo_port=args.echo_port,
        data_port=args.data_port,
    )
    try:
        server.start()
    except KeyboardInterrupt:
        server.stop()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='A script to start the nidsfuzz client or server'
    )

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--replay', action='store_true', help='Replay interesting testcases found in nidsfuzz')
    group.add_argument('--client', action='store_true', help='Start the nidsfuzz client')
    group.add_argument('--server', action='store_true', help='Start the nidsfuzz server')

    # some options about the client
    parser.add_argument('--out_dir', type=str,
                        help='The output directory that stores the interesting test cases.')
    parser.add_argument('--initiator', type=str, default='127.0.0.1',
                        help='The IP of the nidsfuzz client (default: 127.0.0.1)')
    parser.add_argument('--responder', type=str, default='0.0.0.0',
                        help='The IP of the nidsfuzz server (default: 0.0.0.0)')
    parser.add_argument('--echo_port', type=int, default=34567,
                        help='The port that the echo service listens on (default: 34567)')
    parser.add_argument('--data_port', type=int, default=80,
                        help='The port that the tested service listens on (default: 80)')

    parser.add_argument('--rule_file', type=str,
                        help='The detection rules file used by nidsfuzz')
    parser.add_argument('--protocol', type=str, default="http",
                        help='The protocol used to group rules and generate mutated messages (default: http)')
    parser.add_argument('--batch_size', type=int, default=1,
                        help='The number of rules selected per round (default: 1)')
    parser.add_argument('--repeatable', action='store_true',
                        help='Enable reuse of rules from the file')
    parser.add_argument('--only_activated', action='store_true',
                        help='Test only the activated rules in the file')

    parser.add_argument(
        "--select_strategy",
        choices=["combine", "permutate", "random", "sequential"],
        default="sequential",
        help="Choose one of the following pre-defined selection strategies: combine, permutate, random, sequential",
    )
    parser.add_argument(
        "--mutate_strategy",
        choices=["combine", "obfuscate", "repeat", "random"],
        default="repeat",
        help="Choose one of the following pre-defined mutation strategies: combine, obfuscate, repeat, random",
    )

    parser.add_argument('--alert_files', nargs='+', type=str,
                        help='The alert files generated by NIDS.')
    parser.add_argument('--timeout', type=float, default=0.5,)
    parser.add_argument("--n_tests", type=int, default=25,)

    # the option specific to replay
    parser.add_argument('--traffic', type=str,
                        help='The folder which stores the test result of nidsfuzz')

    args = parser.parse_args()

    if args.client:
        run_client()
    elif args.server:
        run_server()
    elif args.replay:
        run_replay()

