import argparse

def str2bool(v):
    if isinstance(v, bool):
        return v
    if v.lower() in ('yes', 'true', 't', 'y', '1'):
        return True
    elif v.lower() in ('no', 'false', 'f', 'n', '0'):
        return False
    else:
        raise argparse.ArgumentTypeError('Boolean value expected.')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='A command line utility to start the nidsfuzz or the tunable responder.'
    )

    task = parser.add_mutually_exclusive_group(required=True)
    task.add_argument('--fuzzer', action='store_true', help='Start the NIDSFuzz workflow')
    task.add_argument('--responder', action='store_true', help='Start the tunable responder')
    task.add_argument('--replayer', action='store_true', help='Replay interesting testcases found by NIDSFuzz')

    ############################################################
    # Below are options for the fuzzer task
    ############################################################

    parser.add_argument('--out_dir', type=str,
                        help='The output directory that stores the test packets and alert discrepancies.')
    parser.add_argument('--initiator_ip', type=str, default='127.0.0.1',
                        help='The IP of the NIDSFuzz initiator (default: 127.0.0.1)')
    parser.add_argument('--responder_ip', type=str, default='0.0.0.0',
                        help='The IP of the NIDSFuzz responder (default: 0.0.0.0)')
    parser.add_argument('--orch_port', type=int, default=34567,
                        help='The port that the orchestration service listens on (default: 34567)')
    parser.add_argument('--data_port', type=int, default=80,
                        help='The port that the fuzz service listens on (default: 80)')

    parser.add_argument('--rule_file', type=str,
                        help='The ruleset to be tested by NIDSFuzz')
    parser.add_argument('--protocol', type=str, default="http",
                        help='The target protocol (default: http)')
    parser.add_argument('--batch_size', type=int, default=1,
                        help='The number of rules selected per round (default: 1)')
    # parser.add_argument('--repeatable', action='store_true',
    #                     help='Enable reuse of rules from the file')
    parser.add_argument('--repeatable', type=str2bool, default=False,
                        help='Enable reuse of rules from the file')

    parser.add_argument(
        "--selection",
        choices=["combination", "permutation", "random", "sequential"],
        default="sequential",
        help="Choose one of the following pre-defined selection strategies: combination, permutation, random, sequential",
    )

    parser.add_argument(
        "--mutation",
        choices=["pass-through", "blending", "obfuscation", "repetition", "random"],
        default="pass-through",
        help="Choose one of the following pre-defined mutation strategies: pass-through, blending, obfuscation, repetition, random",
    )

    parser.add_argument('--alert_files', nargs='+', type=str,
                        help='The NIDSs generated alert files that should be monitored by NIDSFuzz.')
    parser.add_argument('--timeout', type=float, default=0.5, )
    parser.add_argument("--port_window_size", type=int, default=25, )

    parser.add_argument('--threshold', type=int, default=1,
                       help='The threshold used by the accumulation analyzer (default: 1)')

    ############################################################
    # Below are options for the replayer task
    ############################################################

    parser.add_argument('--replay_dir', type=str,
                        help='The replay directory generated by NIDSFuzz.')

    args = parser.parse_args()

    ############################################################
    # Execute the specific task based on the provided parameters
    ############################################################

    if args.fuzzer:
        if args.rule_file is None:
            parser.error("The --rule_file option is required for launching the NIDSFuzz fuzzer")

        from fuzzer import Fuzzer

        fuzzer = Fuzzer(
            initiator_ip=args.initiator_ip,
            responder_ip=args.responder_ip,
            orch_port=args.orch_port,
            data_port=args.data_port,
            our_dir=args.out_dir,
        ).setup_rule_selector(
            rule_files=[args.rule_file],
            algorithm=args.selection,
            batch_size=args.batch_size,
            repeatable=args.repeatable
        ).setup_rule_mutator(
            strategy=args.mutation,
        ).setup_alert_sanitizer(
            monitored_files=args.alert_files,
            timeout=args.timeout,
            port_window_size=args.port_window_size,
        ).setup_accumulation_analyzer(
            threshold=args.threshold
        )

        try:
            fuzzer.start()
        except KeyboardInterrupt:
            fuzzer.stop()

    elif args.responder:
        from injection import TunableResponder

        tunable_responder = TunableResponder(
            host="0.0.0.0",
            orch_port=args.orch_port,
            data_port=args.data_port,
        )

        try:
            tunable_responder.start()
        except KeyboardInterrupt:
            tunable_responder.stop()

    elif args.replayer:

        from replayer import Replayer

        replayer = Replayer(
            initiator_ip=args.initiator_ip,
            responder_ip=args.responder_ip,
            orch_port=args.orch_port,
            data_port=args.data_port,
            replay_dir=args.replay_dir,
        )

        replayer.replay()