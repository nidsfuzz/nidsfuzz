import re
import threading
import time
from collections import deque

from logger import logger

"""
    This class monitors the alert files which are written by each NIDS.
    The example alerts generated by each NIDS platform is as follows:
    (i) Snort2:
        08/04-09:18:38.635286  [**] [1:334:12] PROTOCOL-FTP .forward [**] [Classification: A suspicious filename was detected] [Priority: 2] {TCP} 172.18.0.10:48657 -> 192.168.0.10:21
    (ii) Snort3:
        08/04-09:18:38.635286 [**] [1:334:12] "PROTOCOL-FTP .forward" [**] [Classification: A suspicious filename was detected] [Priority: 2] {TCP} 172.18.0.10:48657 -> 192.168.0.10:21
    (iii) Suricata:
        08/04/2025-09:18:38.635894  [**] [1:334:12] PROTOCOL-FTP .forward [**] [Classification: A suspicious filename was detected] [Priority: 2] {TCP} 172.18.0.10:48657 -> 192.168.0.10:21
"""

class AlertMonitor:

    # Rule ID, Source IP, Source Port, Destination IP, Destination Port
    ALERT_PATTERN = (r'^.*? \[\*\*] \[(?P<rule_id>\d+:\d+:\d+)] .*? \[\*\*] \[Classification.*?] \[Priority.*?] \{.*?} '
                     r'(?P<src_ip>\d+\.\d+\.\d+.\d+):(?P<src_port>\d+) -> (?P<dst_ip>\d+\.\d+\.\d+.\d+):('
                     r'?P<dst_port>\d+)')

    def __init__(self, monitored_alerts: dict[str, deque[tuple]]):
        self.monitored_alerts = monitored_alerts

        # The pattern used to capture alert texts.
        self.alert_pattern = re.compile(self.ALERT_PATTERN)

        # The variables related to the alert monitoring thread
        self.monitor_threads: list[threading.Thread] = []
        self.stop_event = threading.Event()
        self.active_event = threading.Event()

    def _monitor_file(self, file_path: str, alert_deque: deque):
        while True:
            try:
                with open(file_path, 'r') as f:
                    logger.info(f'Opening file successfully: {file_path}')
                    # Move the file's read pointer to the end of the file
                    # f.seek(0, 2)

                    while not self.stop_event.is_set():
                        self.active_event.wait()
                        if self.stop_event.is_set(): break

                        line = f.readline()
                        if not line:
                            # logger.debug(f'\f{file_path}: There is no line in the file, waiting a few seconds...')
                            time.sleep(0.1)
                            continue

                        captured_alert = self._match_alert(line)
                        if captured_alert:
                            # Found an alert and append it into the deque
                            logger.debug(f'\t{file_path}: Captured an alert: {captured_alert}')
                            alert_deque.append(captured_alert)

                    return
            except FileNotFoundError:
                logger.error(f'File {file_path} not found, retrying...')
                self.stop_event.wait(1)
            except Exception as e:
                logger.error(f'Failed to monitor file [{file_path}]: {e}')
                break

    def _match_alert(self, line: str):
        line = line.strip()
        match = re.match(self.alert_pattern, line)
        if match:
            return match.groups()
        return None

    def start(self):
        if self.monitor_threads:
            logger.info(f'The alert monitor is already started.')
            return

        logger.info(f'Starting the alert monitor.')
        for file_path, alert_deque in self.monitored_alerts.items():
            thread = threading.Thread(target=self._monitor_file, args=(file_path, alert_deque,))
            thread.daemon = True
            thread.start()
            self.monitor_threads.append(thread)

    def resume(self):
        logger.debug(f'\t>>> Resuming monitoring threads...')
        self.active_event.set()

    def pause(self):
        logger.debug(f'\t>>> Pausing monitoring threads...')
        self.active_event.clear()

    def stop(self):
        self.active_event.set()
        self.stop_event.set()
        logger.info(f'Stopping the alert monitor.')
        for thread in self.monitor_threads:
            thread.join()

